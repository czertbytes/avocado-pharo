TestCase subclass: #AvRawExperimentTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado-Tests'!!AvRawExperimentTests methodsFor: 'tests' stamp: 'DanielHodan 10/15/2012 12:55'!testAddingSamples	| re re2 rs1 rs2 rs3 |	re := AvRawExperiment new.	re addRawSample:  (AvRawSample sample: 'a' detector: 'b'  task: 'c'  value: '1.0').	re addRawSample:  (AvRawSample sample: 'a' detector: 'b'  task: 'c'  value: 'Undet.').	re addRawSample:  (AvRawSample sample: 'a' detector: 'b'  task: 'c'  value: 'Undet.').	re addRawSample:  (AvRawSample sample: 'a' detector: 'b'  task: 'c'  value: '1.0').	re addRawSample:  (AvRawSample sample: 'z' detector: 'b'  task: 'c'  value: '2.0').	re addRawSample:  (AvRawSample sample: 'z' detector: 'b'  task: 'c'  value: '3.0').	re addRawSample:  (AvRawSample sample: 'z' detector: 'b'  task: 'x'  value: '4.0').		self assert: (re samples size) equals: 3.		rs1 := AvRawSample new; sample: 'a' detector: 'b'  task: 'c'.	rs1 values:  (OrderedCollection newFrom: {'1.0' . 'Undet.' . 'Undet.'  . '1.0'}).	rs2 := AvRawSample new; sample: 'z' detector: 'b'  task: 'c'.	rs2 values:  (OrderedCollection newFrom: {'2.0' . '3.0'}).	rs3 := AvRawSample new; sample: 'z' detector: 'b'  task: 'x'.	rs3 values:  (OrderedCollection newFrom: {'4.0'}).	self assert: (re samples) equals: (Set newFrom: {rs3 . rs2 . rs1}).	! !