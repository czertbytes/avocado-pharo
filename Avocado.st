Object subclass: #AvComputationRunner	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!!AvComputationRunner methodsFor: 'as yet unclassified' stamp: 'DanielHodan 10/15/2012 13:37'!run: aRawExperiment	! !Object subclass: #AvRawExperiment	instanceVariableNames: 'metadata samples'	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!!AvRawExperiment methodsFor: 'accessing' stamp: 'DanielHodan 10/14/2012 15:58'!metadata	^ metadata! !!AvRawExperiment methodsFor: 'accessing' stamp: 'DanielHodan 10/12/2012 23:12'!samples	^ samples! !!AvRawExperiment methodsFor: 'accessing' stamp: 'DanielHodan 10/12/2012 23:12'!samples: anObject	samples := anObject! !!AvRawExperiment methodsFor: 'initialize-release' stamp: 'DanielHodan 10/14/2012 16:40'!initialize 	super initialize.	samples := Set new.! !!AvRawExperiment methodsFor: 'printing' stamp: 'DanielHodan 10/13/2012 02:39'!printOn: aStream	"Append a sequence of characters to aStream that identify the receiver."	super printOn: aStream.	aStream		nextPutAll: ' metadata: ';		print: metadata.	aStream		nextPutAll: ' samples: ';		print: samples! !!AvRawExperiment methodsFor: 'comparing' stamp: 'DanielHodan 10/14/2012 15:58'!= anObject	"Answer whether the receiver and anObject represent the same object."	self == anObject		ifTrue: [ ^ true ].	self class = anObject class		ifFalse: [ ^ false ].	^ metadata = anObject metadata and: [ samples = anObject samples ]! !!AvRawExperiment methodsFor: 'comparing' stamp: 'DanielHodan 10/14/2012 15:58'!hash	"Answer an integer value that is related to the identity of the receiver."	^ metadata hash bitXor: samples hash! !!AvRawExperiment methodsFor: 'adding' stamp: 'DanielHodan 10/14/2012 21:47'!addRawSample: aRawSample	(samples includes: aRawSample)		ifTrue: [ (samples like: aRawSample) values addAll: (aRawSample values) ]		ifFalse: [ samples add: aRawSample ]	! !Object subclass: #AvTargetGene	instanceVariableNames: 'sample detector task'	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!!AvTargetGene methodsFor: 'accessing' stamp: 'DanielHodan 10/15/2012 13:31'!detector	^ detector! !!AvTargetGene methodsFor: 'accessing' stamp: 'DanielHodan 10/15/2012 13:31'!detector: anObject	detector := anObject! !!AvTargetGene methodsFor: 'accessing' stamp: 'DanielHodan 10/15/2012 13:25'!sample	^ sample! !!AvTargetGene methodsFor: 'accessing' stamp: 'DanielHodan 10/15/2012 13:25'!sample: anObject	sample := anObject! !!AvTargetGene methodsFor: 'accessing' stamp: 'DanielHodan 10/15/2012 13:31'!task	^ task! !!AvTargetGene methodsFor: 'accessing' stamp: 'DanielHodan 10/15/2012 13:31'!task: anObject	task := anObject! !AvTargetGene subclass: #AvEndogenousControl	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!AvEndogenousControl subclass: #AvSample	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!AvSample subclass: #AvUntreatedControl	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!Object subclass: #AvExperiment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!Object subclass: #AvRawSample	instanceVariableNames: 'sample detector task values'	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!!AvRawSample methodsFor: 'comparing' stamp: 'DanielHodan 10/13/2012 02:33'!= anObject	"Answer whether the receiver and anObject represent the same object."	self == anObject		ifTrue: [ ^ true ].	self class = anObject class		ifFalse: [ ^ false ].	^ sample = anObject sample and: [ detector = anObject detector and: [ task = anObject task ] ]! !!AvRawSample methodsFor: 'comparing' stamp: 'DanielHodan 10/13/2012 02:33'!hash	"Answer an integer value that is related to the identity of the receiver."	^ sample hash bitXor: (detector hash bitXor: task hash)! !!AvRawSample methodsFor: 'initialize-release' stamp: 'DanielHodan 10/14/2012 15:54'!initialize	super initialize.	values := OrderedCollection new.! !!AvRawSample methodsFor: 'accessing' stamp: 'DanielHodan 10/12/2012 22:01'!detector	^ detector! !!AvRawSample methodsFor: 'accessing' stamp: 'DanielHodan 10/12/2012 22:01'!sample	^ sample! !!AvRawSample methodsFor: 'accessing' stamp: 'DanielHodan 10/12/2012 22:01'!task	^ task! !!AvRawSample methodsFor: 'accessing' stamp: 'DanielHodan 10/14/2012 15:53'!values	^ values! !!AvRawSample methodsFor: 'accessing' stamp: 'DanielHodan 10/14/2012 15:53'!values: anObject	values := anObject! !!AvRawSample methodsFor: 'private' stamp: 'DanielHodan 10/15/2012 12:50'!setSample: aSample detector: aDetector task: aTask	sample := aSample.	detector := aDetector.	task := aTask.	^ self		! !!AvRawSample methodsFor: 'private' stamp: 'DanielHodan 10/14/2012 15:54'!setSample: aSample detector: aDetector task: aTask value: aValue	sample := aSample.	detector := aDetector.	task := aTask.	values add: aValue.	^ self		! !!AvRawSample methodsFor: 'printing' stamp: 'DanielHodan 10/14/2012 15:54'!printOn: aStream	"Append a sequence of characters to aStream that identify the receiver."	super printOn: aStream.	aStream		nextPutAll: ' sample: ';		print: sample.	aStream		nextPutAll: ' detector: ';		print: detector.	aStream		nextPutAll: ' task: ';		print: task.	aStream		nextPutAll: ' values: ';		print: values! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AvRawSample class	instanceVariableNames: ''!!AvRawSample class methodsFor: 'instance creation' stamp: 'DanielHodan 10/15/2012 12:49'!sample: aSample detector: aDetector task: aTask	^ self new		setSample: aSample		detector: aDetector		task: aTask		! !!AvRawSample class methodsFor: 'instance creation' stamp: 'DanielHodan 10/14/2012 15:55'!sample: aSample detector: aDetector task: aTask value: aValue	^ self new		setSample: aSample		detector: aDetector		task: aTask		value: aValue 		! !Object subclass: #AvComputationDispatcher	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Avocado'!